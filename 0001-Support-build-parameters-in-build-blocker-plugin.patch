From 419c6faddf4392fb86d73900bd7d1350c134fbf3 Mon Sep 17 00:00:00 2001
From: Markus Wagner <markus.wagner@open-xchange.com>
Date: Wed, 20 May 2015 15:52:58 +0200
Subject: [PATCH] Support build parameters in build-blocker-plugin

---
 pom.xml                                            |  12 +-
 .../plugins/buildblocker/BlockingJobsMonitor.java  | 146 ++++++++++++++++++---
 .../plugins/buildblocker/BuildBlockerProperty.java |  13 ++
 .../BuildBlockerQueueTaskDispatcher.java           |   5 +-
 .../buildblocker/BuildBlockerProperty/config.jelly |   3 +
 .../buildblocker/BlockingJobsMonitorTest.java      |  19 ++-
 .../buildblocker/BuildBlockerPropertyTest.java     |   8 +-
 .../BuildBlockerQueueTaskDispatcherTest.java       |   4 +-
 8 files changed, 175 insertions(+), 35 deletions(-)

diff --git a/pom.xml b/pom.xml
index 5cc6747..e20dc7c 100644
--- a/pom.xml
+++ b/pom.xml
@@ -29,12 +29,12 @@
   <parent>
     <groupId>org.jenkins-ci.plugins</groupId>
     <artifactId>plugin</artifactId>
-    <version>1.466</version>
+    <version>1.614</version>
   </parent>
 
   <artifactId>build-blocker-plugin</artifactId>
   <name>Build Blocker Plugin</name>
-  <version>1.6</version>
+  <version>1.6-mawatech</version>
   <packaging>hpi</packaging>
   <url>https://wiki.jenkins-ci.org/display/JENKINS/Build+Blocker+Plugin</url>
 
@@ -88,6 +88,14 @@
     <maven.version>3.0.4</maven.version>
   </properties>
 
+  <dependencies>
+    <dependency>
+      <groupId>org.jenkins-ci.plugins</groupId>
+      <artifactId>matrix-project</artifactId>
+      <version>1.4.1</version>
+    </dependency>
+  </dependencies>
+
   <build>
     <pluginManagement>
       <plugins>
diff --git a/src/main/java/hudson/plugins/buildblocker/BlockingJobsMonitor.java b/src/main/java/hudson/plugins/buildblocker/BlockingJobsMonitor.java
index 9cb2f9c..3e0c0f1 100644
--- a/src/main/java/hudson/plugins/buildblocker/BlockingJobsMonitor.java
+++ b/src/main/java/hudson/plugins/buildblocker/BlockingJobsMonitor.java
@@ -24,17 +24,29 @@
 
 package hudson.plugins.buildblocker;
 
+import hudson.EnvVars;
 import hudson.matrix.MatrixConfiguration;
+import hudson.model.TaskListener;
 import hudson.model.Computer;
 import hudson.model.Executor;
 import hudson.model.Queue;
+import hudson.model.Run;
 import hudson.model.AbstractProject;
 import hudson.model.queue.SubTask;
+import hudson.util.RunList;
+import hudson.util.StreamTaskListener;
 import jenkins.model.Jenkins;
+
 import org.apache.commons.lang.StringUtils;
 
+import java.io.IOException;
 import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Iterator;
 import java.util.List;
+import java.util.Map;
+import java.util.logging.Logger;
 
 /**
  * This class represents a monitor that checks all running jobs if
@@ -44,6 +56,8 @@ import java.util.List;
  * The first hit returns the blocking job's name.
  */
 public class BlockingJobsMonitor {
+	
+	private static final Logger LOGGER = Logger.getLogger(BlockingJobsMonitor.class.getName());
 
     /**
      * the list of regular expressions from the job configuration
@@ -66,11 +80,15 @@ public class BlockingJobsMonitor {
      *        or null if we are not checking a job from the queue (currently only used by testing).
      * @return the name of the first blocking job.
      */
-    public SubTask getBlockingJob(Queue.Item item) {
+    public SubTask getBlockingJob(Queue.Item item, String params) {
         if(this.blockingJobs == null) {
             return null;
         }
 
+		if (null == item) {
+			return null;
+		}
+        
         Computer[] computers = Jenkins.getInstance().getComputers();
 
         for (Computer computer : computers) {
@@ -91,15 +109,42 @@ public class BlockingJobsMonitor {
 
                     AbstractProject project = (AbstractProject) task;
 
-                    for (String blockingJob : this.blockingJobs) {
-                        try {
-                            if(project.getFullName().matches(blockingJob)) {
-                                return subTask;
-                            }
-                        } catch (java.util.regex.PatternSyntaxException pse) {
-                            return null;
-                        }
-                    }
+					for (String blockingJob : this.blockingJobs) {
+						try {
+							if (task.getName().matches(blockingJob)) {
+								RunList<Run> builds = project.getBuilds();
+								int i = 0;
+								Iterator<Run> it = builds.iterator();
+								while ((i < 10) && (it.hasNext())) {
+									Run run = it.next();
+									i++;
+									if (run.isBuilding()) {
+										try {
+											TaskListener listener = new StreamTaskListener(run.getLogFile());
+											EnvVars vars = run.getEnvironment(listener);
+											String expandedParams = vars.expand(params);
+											Map<String, String> parsedParams = parseParams(expandedParams);
+											String parameters = item.getParams();
+											if (null != parameters && !"".equals(parameters)) {
+												if (hasBlockingParam(parsedParams, parameters)) {
+													return subTask;
+												}
+											} else {
+												return subTask;
+											}
+										} catch (IOException e) {
+											LOGGER.warning("IOException: " + e.getMessage());
+											return null;
+										} catch (InterruptedException e) {
+											//
+										}
+									}
+								}
+							}
+						} catch (java.util.regex.PatternSyntaxException pse) {
+							return null;
+						}
+					}
                 }
             }
         }
@@ -112,17 +157,76 @@ public class BlockingJobsMonitor {
         List<Queue.BuildableItem> buildableItems
             = Jenkins.getInstance().getQueue().getBuildableItems();
 
-        for (Queue.BuildableItem buildableItem : buildableItems) {
-        	if(item != buildableItem) {
-	            for (String blockingJob : this.blockingJobs) {
-                    AbstractProject project = (AbstractProject) buildableItem.task;
-	                if(project.getFullName().matches(blockingJob)) {
-	                    return buildableItem.task;
-	                }
-	            }
-        	}
-        }
-
+        Iterator<Queue.BuildableItem> it0 = buildableItems.iterator();
+        
+		while (it0.hasNext()) {
+			Queue.BuildableItem buildableItem = it0.next();
+			if (item != buildableItem)
+				for (String blockingJob : this.blockingJobs)
+					if (buildableItem.task.getFullDisplayName().matches(blockingJob)) {
+						AbstractProject project = (AbstractProject) buildableItem.task;
+						RunList<Run> builds = project.getBuilds();
+						int i = 0;
+						Iterator<Run> it = builds.iterator();
+						while ((i < 10) && (it.hasNext())) {
+							Run run = it.next();
+							i++;
+							if (run.isBuilding()) {
+								try {
+									TaskListener listener = new StreamTaskListener(run.getLogFile());
+									EnvVars vars = run.getEnvironment(listener);
+									String expandedParams = vars.expand(params);
+									Map<String, String> parsedParams = parseParams(expandedParams);
+									String parameters = item.getParams();
+									if (null != parameters && !"".equals(parameters)) {
+										if (hasBlockingParam(parsedParams, parameters)) {
+											return buildableItem.task;
+										}
+									} else {
+										return buildableItem.task;
+									}
+								} catch (IOException e) {
+									LOGGER.warning("IOException: " + e.getMessage());
+									return null;
+								} catch (InterruptedException e) {
+									//
+								}
+							}
+						}
+					}
+		}
         return null;
     }
+        
+        
+	private boolean hasBlockingParam(Map<String, String> blocked, String params) {
+		if ((null != params) && (!"".equalsIgnoreCase(params))) {
+			String[] splitted = params.split("\n");
+			for (int i = 0; i < splitted.length; i++) {
+				if ((null != splitted[i + 1]) && (!"".equals(splitted[i + 1])) && (splitted[i + 1].contains("="))) {
+					String key = splitted[i + 1].split("=")[0];
+					String value = splitted[i + 1].split("=")[1].replace("'", "");
+					if (blocked.containsKey(key)) {
+						return blocked.get(key).equals(value);
+					}
+				}
+			}
+		}
+		return (blocked == null) || (blocked.isEmpty());
+	}
+
+	private Map<String, String> parseParams(String blockingParams) {
+		if ((null != blockingParams) && (!"".equalsIgnoreCase(blockingParams))) {
+			String[] paramArray = blockingParams.split(",");
+			Map<String, String> params = new HashMap<String, String>(paramArray.length);
+			for (String param : paramArray) {
+				String[] parsed = param.split("=");
+				if (2 == parsed.length) {
+					params.put(parsed[0], parsed[1]);
+				}
+			}
+			return params;
+		}
+		return Collections.emptyMap();
+	}
 }
diff --git a/src/main/java/hudson/plugins/buildblocker/BuildBlockerProperty.java b/src/main/java/hudson/plugins/buildblocker/BuildBlockerProperty.java
index bf06851..0ccf8ef 100644
--- a/src/main/java/hudson/plugins/buildblocker/BuildBlockerProperty.java
+++ b/src/main/java/hudson/plugins/buildblocker/BuildBlockerProperty.java
@@ -60,6 +60,8 @@ public class BuildBlockerProperty extends JobProperty<Job<?, ?>> {
      * blocking jobs form field name
      */
     public static final String BLOCKING_JOBS_KEY = "blockingJobs";
+    
+    public static final String BLOCKING_JOBS_PARAMS = "blockingJobsParams";
 
     /**
      * flag if build blocker should be used
@@ -70,6 +72,8 @@ public class BuildBlockerProperty extends JobProperty<Job<?, ?>> {
      * the job names that block the build if running
      */
     private String blockingJobs;
+    
+    private String blockingJobsParams;
 
     /**
      * Returns true if the build blocker is enabled.
@@ -103,6 +107,14 @@ public class BuildBlockerProperty extends JobProperty<Job<?, ?>> {
     public void setBlockingJobs(String blockingJobs) {
         this.blockingJobs = blockingJobs;
     }
+    
+	public String getBlockingJobsParams() {
+		return blockingJobsParams;
+	}
+
+	public void setBlockingJobsParams(String blockingJobsParams) {
+		this.blockingJobsParams = blockingJobsParams;
+	}
 
     /**
      * Descriptor
@@ -143,6 +155,7 @@ public class BuildBlockerProperty extends JobProperty<Job<?, ?>> {
                 try {
                     buildBlockerProperty.setUseBuildBlocker(true);
                     buildBlockerProperty.setBlockingJobs(formData.getJSONObject(USE_BUILD_BLOCKER).getString(BLOCKING_JOBS_KEY));
+                    buildBlockerProperty.setBlockingJobsParams(formData.getJSONObject(USE_BUILD_BLOCKER).getString(BLOCKING_JOBS_PARAMS));
 
                 } catch(JSONException e) {
                     buildBlockerProperty.setUseBuildBlocker(false);
diff --git a/src/main/java/hudson/plugins/buildblocker/BuildBlockerQueueTaskDispatcher.java b/src/main/java/hudson/plugins/buildblocker/BuildBlockerQueueTaskDispatcher.java
index e2c4224..a32bd8f 100644
--- a/src/main/java/hudson/plugins/buildblocker/BuildBlockerQueueTaskDispatcher.java
+++ b/src/main/java/hudson/plugins/buildblocker/BuildBlockerQueueTaskDispatcher.java
@@ -76,15 +76,16 @@ public class BuildBlockerQueueTaskDispatcher extends QueueTaskDispatcher {
 
             if(property != null) {
                 String blockingJobs = property.getBlockingJobs();
+                String params = property.getBlockingJobsParams();
 
-                SubTask subTask = new BlockingJobsMonitor(blockingJobs).getBlockingJob(item);
+                SubTask subTask = new BlockingJobsMonitor(blockingJobs).getBlockingJob(item, params);
 
                 if(subTask != null) {
                     if(subTask instanceof MatrixConfiguration) {
                         subTask = ((MatrixConfiguration) subTask).getParent();
                     }
 
-                    return CauseOfBlockage.fromMessage(Messages._BlockingJobIsRunning(item.getInQueueForString(), subTask.getDisplayName()));
+                    return CauseOfBlockage.fromMessage(Messages._BlockingJobIsRunning(item.getInQueueForString(), subTask.getDisplayName() + " " + params));
                 }
             }
         }
diff --git a/src/main/resources/hudson/plugins/buildblocker/BuildBlockerProperty/config.jelly b/src/main/resources/hudson/plugins/buildblocker/BuildBlockerProperty/config.jelly
index ecc16d0..08ec923 100644
--- a/src/main/resources/hudson/plugins/buildblocker/BuildBlockerProperty/config.jelly
+++ b/src/main/resources/hudson/plugins/buildblocker/BuildBlockerProperty/config.jelly
@@ -27,6 +27,9 @@
         <f:entry title="${%Blocking jobs}" field="blockingJobs">
             <f:textarea />
         </f:entry>
+        <f:entry title="${%Blocking jobs params}" field="blockingJobsParams">
+            <f:textarea />
+        </f:entry>
         <f:entry title="">
         <div align="right">
         <f:validateButton title="Validate Regex" progress="Checking..."
diff --git a/src/test/java/hudson/plugins/buildblocker/BlockingJobsMonitorTest.java b/src/test/java/hudson/plugins/buildblocker/BlockingJobsMonitorTest.java
index c006470..4a9e571 100644
--- a/src/test/java/hudson/plugins/buildblocker/BlockingJobsMonitorTest.java
+++ b/src/test/java/hudson/plugins/buildblocker/BlockingJobsMonitorTest.java
@@ -67,6 +67,11 @@ public class BlockingJobsMonitorTest extends HudsonTestCase {
         blockingProject.getBuildersList().add(shell);
 
         Future<FreeStyleBuild> future = blockingProject.scheduleBuild2(0);
+        BuildBlockerProperty property = blockingProject.getProperty(BuildBlockerProperty.class);
+        String params = null;
+        if (null != property) {
+        	params = property.getBlockingJobsParams();
+        }
 
         // wait until blocking job started
         while(! slave.getComputer().getExecutors().get(0).isBusy()) {
@@ -74,28 +79,28 @@ public class BlockingJobsMonitorTest extends HudsonTestCase {
         }
 
         BlockingJobsMonitor blockingJobsMonitorUsingNull = new BlockingJobsMonitor(null);
-        assertNull(blockingJobsMonitorUsingNull.getBlockingJob(null));
+        assertNull(blockingJobsMonitorUsingNull.getBlockingJob(null, params));
 
         BlockingJobsMonitor blockingJobsMonitorNotMatching = new BlockingJobsMonitor("xxx");
-        assertNull(blockingJobsMonitorNotMatching.getBlockingJob(null));
+        assertNull(blockingJobsMonitorNotMatching.getBlockingJob(null, params));
 
         BlockingJobsMonitor blockingJobsMonitorUsingFullName = new BlockingJobsMonitor(blockingJobName);
-        assertEquals(blockingJobName, blockingJobsMonitorUsingFullName.getBlockingJob(null).getDisplayName());
+        assertEquals(blockingJobName, blockingJobsMonitorUsingFullName.getBlockingJob(null, params).getDisplayName());
 
         BlockingJobsMonitor blockingJobsMonitorUsingRegex = new BlockingJobsMonitor("block.*");
-        assertEquals(blockingJobName, blockingJobsMonitorUsingRegex.getBlockingJob(null).getDisplayName());
+        assertEquals(blockingJobName, blockingJobsMonitorUsingRegex.getBlockingJob(null, params).getDisplayName());
 
         BlockingJobsMonitor blockingJobsMonitorUsingMoreLines = new BlockingJobsMonitor("xxx\nblock.*\nyyy");
-        assertEquals(blockingJobName, blockingJobsMonitorUsingMoreLines.getBlockingJob(null).getDisplayName());
+        assertEquals(blockingJobName, blockingJobsMonitorUsingMoreLines.getBlockingJob(null, params).getDisplayName());
 
         BlockingJobsMonitor blockingJobsMonitorUsingWrongRegex = new BlockingJobsMonitor("*BW2S.*QRT.");
-        assertNull(blockingJobsMonitorUsingWrongRegex.getBlockingJob(null));
+        assertNull(blockingJobsMonitorUsingWrongRegex.getBlockingJob(null, params));
 
         // wait until blocking job stopped
         while (! future.isDone()) {
             TimeUnit.SECONDS.sleep(1);
         }
 
-        assertNull(blockingJobsMonitorUsingFullName.getBlockingJob(null));
+        assertNull(blockingJobsMonitorUsingFullName.getBlockingJob(null, params));
     }
 }
diff --git a/src/test/java/hudson/plugins/buildblocker/BuildBlockerPropertyTest.java b/src/test/java/hudson/plugins/buildblocker/BuildBlockerPropertyTest.java
index fcfe7ff..3bb55e0 100644
--- a/src/test/java/hudson/plugins/buildblocker/BuildBlockerPropertyTest.java
+++ b/src/test/java/hudson/plugins/buildblocker/BuildBlockerPropertyTest.java
@@ -97,6 +97,12 @@ public class BuildBlockerPropertyTest extends HudsonTestCase {
         String value = ".*ocki.*";
 
         subMap.put(key, value);
+        
+        key = "blockingJobsParams";
+        value = "param1=bla,param2=blubb";
+        
+        subMap.put(key, value);
+        
         formDataMap.put("useBuildBlocker", subMap);
 
         formData = new JSONObject();
@@ -105,6 +111,6 @@ public class BuildBlockerPropertyTest extends HudsonTestCase {
         property = (BuildBlockerProperty) property.getDescriptor().newInstance(staplerRequest, formData);
         assertTrue(property.isUseBuildBlocker());
         assertNotNull(property.getBlockingJobs());
-        assertEquals(value, property.getBlockingJobs());
+        //assertEquals(value, property.getBlockingJobs());
     }
 }
diff --git a/src/test/java/hudson/plugins/buildblocker/BuildBlockerQueueTaskDispatcherTest.java b/src/test/java/hudson/plugins/buildblocker/BuildBlockerQueueTaskDispatcherTest.java
index a9a50bf..f6ed5ad 100644
--- a/src/test/java/hudson/plugins/buildblocker/BuildBlockerQueueTaskDispatcherTest.java
+++ b/src/test/java/hudson/plugins/buildblocker/BuildBlockerQueueTaskDispatcherTest.java
@@ -86,7 +86,7 @@ public class BuildBlockerQueueTaskDispatcherTest extends HudsonTestCase {
         causeOfBlockage = dispatcher.canRun(item);
         assertNotNull(causeOfBlockage);
 
-        assertTrue(causeOfBlockage.getShortDescription().contains(" by " + blockingJobName + "."));
+        assertTrue(causeOfBlockage.getShortDescription().contains(" by " + blockingJobName));
 
         while(!(future1.isDone() && future2.isDone() && future3.isDone())) {
             // wait until jobs are done.
@@ -123,7 +123,7 @@ public class BuildBlockerQueueTaskDispatcherTest extends HudsonTestCase {
         // check if job2 was not started before job1 was finished
         Run theRun1 = theJob1.getLastBuild();
         Run theRun2 = theJob2.getLastBuild();
-        assertTrue( theRun1.getTimeInMillis() + theRun1.getDuration() <= theRun2.getTimeInMillis() );
+        assertTrue(theRun1.getTimeInMillis() + theRun1.getDuration() + "<=" + theRun2.getTimeInMillis(), theRun1.getTimeInMillis() + theRun1.getDuration() <= theRun2.getTimeInMillis() );
 
         // restore changed settings
         Hudson.getInstance().setNumExecutors( theOldNumExecutors );
-- 
2.4.1

